buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.17'
    }
}

plugins {
    id 'de.dfki.mary.voicebuilding-legacy' version '5.5-SNAPSHOT'
    id 'de.undercouch.download' version '3.1.0'
}

group 'de.dfki.mary'
version '5.3-SNAPSHOT'

marytts {
    voice {
        name = 'dfki-pavoque-styles'
        language = 'de'
        gender = 'male'
        type = 'unit selection'
        description = 'A male German unit selection voice with expressive styles "happy", "sad", "angry", and "poker"'
        license {
            name = 'Creative Commons Attribution-NoDerivs 3.0 Unported'
            shortName = 'CC-BY-ND'
            url = 'http://mary.dfki.de/download/by-nd-3.0.html'
        }
        samplingRate = 16000
    }
}

ext {
    styles = ['angry', 'happy', 'neutral', 'poker', 'sad']
    stylemap = [styles, ['sp', 'pp', 'ne', 'pk', 'ob']].transpose().collectEntries()
    stylerevmap = [['sp', 'pp', 'ne', 'pk', 'ob'], styles].transpose().collectEntries()
    flacFiles = styles.collect { file("$buildDir/pavoque-${it}.flac") }
    yamlFiles = styles.collect { file("$buildDir/pavoque-${it}.yaml") }
}

import de.undercouch.gradle.tasks.download.Download
import groovy.xml.*
import org.yaml.snakeyaml.Yaml

task downloadAudio(type: Download) {
    src flacFiles.collect { "https://github.com/marytts/pavoque-data/releases/download/v0.2/$it.name" }
    dest buildDir
    overwrite false
    acceptAnyCertificate true
}

task downloadData(type: Download) {
    src yamlFiles.collect { "https://github.com/marytts/pavoque-data/releases/download/v0.2/$it.name" }
    dest buildDir
    overwrite false
    acceptAnyCertificate true
}

task extractLab {
    dependsOn downloadData
    ext.destDir = file("$buildDir/lab")
    inputs.files yamlFiles
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        def mapping = ['H#': '_', '#': '_']
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                if (utterance.segments) {
                    file("$destDir/${stylemap[utterance.style]}_${utterance.prompt}.lab").withWriter { writer ->
                        writer.println '#'
                        utterance.segments.each { segment ->
                            writer.println "$segment.end 125 ${mapping[segment.lab] ?: segment.lab}"
                        }
                    }
                }
            }
        }
    }
}

task extractText {
    dependsOn downloadData
    ext.destDir = file("$buildDir/text")
    inputs.files yamlFiles
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        yamlFiles.each { yamlFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                if (utterance.segments) {
                    file("$destDir/${stylemap[utterance.style]}_${utterance.prompt}.txt").withWriter { writer ->
                        writer.println utterance.text
                    }
                }
            }
        }
    }
}

task extractWav {
    dependsOn downloadData, downloadAudio
    ext.destDir = file("$buildDir/wav")
    inputs.files yamlFiles, flacFiles
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        [yamlFiles, flacFiles].transpose().each { yamlFile, flacFile ->
            new Yaml().load(yamlFile.newReader()).each { utterance ->
                if (utterance.segments) {
                    exec {
                        commandLine 'sox', flacFile, "$destDir/${stylemap[utterance.style]}_${utterance.prompt}.wav",
                        'trim', utterance.start, "=$utterance.end",
                        'rate', marytts.voice.samplingRate
                    }
                }
            }
        }
    }
}

task generateStyleDefinitionFile {
    ext.destFile = file("$buildDir/styles.txt")
    outputs.files destFile
    doLast {
        destFile.withWriter { writer ->
            stylemap.each { style, prefix ->
                writer.println "${prefix}_* = $style"
            }
        }
    }
}

basenames {
    dependsOn "extractWav", "extractText", "extractLab"
    wavDir = extractWav.destDir
    textDir = extractText.destDir
    labDir = extractLab.destDir
    include '*'
    exclude 'ne_a0181',
    'ne_a0215',
    'ne_a0225',
    'ne_a0385',
    'ne_a0401',
    'ne_a0425',
    'ne_a0544',
    'ne_a0718',
    'ne_a0923',
    'ne_a1095',
    'ne_a1332',
    'ne_a1590',
    'ne_e0078',
    'ne_e0101',
    'ne_e0197',
    'ne_e0268',
    'ne_e0529',
    'ne_e0569',
    'ne_e0795',
    'ne_e0858',
    'ne_e0928',
    'ne_e0959',
    'ne_e0966',
    'ne_e1094',
    'ne_e1113',
    'ne_e1137',
    'ne_e1149',
    'ne_e1175',
    'ne_e1269',
    'ne_e1282',
    'ne_e1301',
    'ob_m0222',
    'ob_m0281',
    'ob_m0304',
    'ob_m0319',
    'ob_poker_d0027',
    'pk_m0222',
    'pk_m0281',
    'pk_m0304',
    'pp_m0222',
    'pp_m0281',
    'pp_m0304',
    'sp_m0222',
    'sp_m0281',
    'sp_m0304'
}


task injectStyleIntoAllophones {
    def srcDir = file("$buildDir/prompt_allophones_nostyle")
    def destDir = file("$buildDir/prompt_allophones")
    inputs.files srcDir
    outputs.dir destDir
    doFirst {
        destDir.mkdirs()
    }
    doLast {
        srcDir.eachFileMatch(~/.+\.xml$/) { xmlFile ->
            def prefix = xmlFile.name.split('_').first()
            def style = stylerevmap[prefix]
            def xml = new XmlSlurper(false, false).parse(xmlFile)
            xml.children().replaceNode { node ->
                prosody(style: style) {
                    mkp.yield node
                }
            }
            file("$destDir/$xmlFile.name").text = XmlUtil.serialize(xml)
        }
    }
}

generateAllophones {
    destDir = file("$buildDir/prompt_allophones_nostyle")
    finalizedBy injectStyleIntoAllophones
}

generateVoiceConfig {
    config.putAll([
            targetCostWeights: "jar:/marytts/voice/$marytts.voice.nameCamelCase/customTargetCostWeights.txt",
            joinCostWeights  : "jar:/marytts/voice/$marytts.voice.nameCamelCase/customJoinCostWeights.txt",
    ])
}
